#CONFIGURAÇÃO DO VSCODE

#Plugins para instalar:
	Markdown All in one
	Auto Close Tag
	Auto Rename Tag
	Git Graph
	Git History
	IntelliSense for CSS class names in HTML

#Atalho para abrir terminal dentro do programa:
    Ctrl + '

#Atalho para abrir qualquer arquivo procurando por nome:
    Ctrl + P






#CONFIGURAÇÃO DO LARAVEL

#Atualizar o Composer
composer selfupdate

#Criar projeto
composer create-project --prefer-dist laravel/laravel:"5.5" ImovelWeb
Clicar em Reload no Apache

#Configurar o GIT dentro da pasta do projeto
git config --global user.name "Nome"
git config --global user.email "seu email do git"
git init
git remote add origin https://github.com/seu_user/seu_repositorio.git

#Commit/Push inicial
git add .
git commit -m "Commit inicial"
git push origin master

#Criando sistema de login
php artisan make:auth

#Criando banco de dados no HeidiSQL
CREATE DATABASE imovelweb;

#Adicionando usuário no HeidiSQL
* Gerenciador de usuários
* Adicionar
* Usuário: homestead
* Do servidor: %
* Senha: secret
* Marcar todas as opções de Privilégios globais

#Editando arquivo .env na raíz do projeto
APP_NAME=ImovelWeb
APP_URL=http://imovelweb.test
DB_DATABASE=imovelweb

#Terminando configuração do login no terminal:
php artisan migrate

#Instalando o AdminLTE for Laravel (https://github.com/jeroennoten/Laravel-AdminLTE)
composer require jeroennoten/laravel-adminlte
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=assets
php artisan make:adminlte
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=config
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=translations
php artisan vendor:publish --provider="JeroenNoten\LaravelAdminLte\ServiceProvider" --tag=views

#Traduzindo o Painel de Usuário
Abrir arquivo config/app.php e mudar as configurações:
'timezone' => 'America/Sao_Paulo',
'locale' => 'pt-br',

#Documentação do Laravel
https://laravel.com/docs/5.5

#Renomeando os títulos para o nome do seu projeto
arquivo resources/views/welcome.blade.php
Linha 8:
<title>Laravel</title>
Substituir Laravel

Linhas 81 a 83:
<div class="title m-b-md">
        Laravel
</div>
Substituir Laravel

arquivo resources/views/home.blade.php
Linha 3:
@section('title', 'AdminLTE')
Substituir AdminLTE

arquivo config/adminlte.php
Linha 16:
'title' => 'AdminLTE 2',
Substituir AdminLTE 2

Linha 33:
'logo' => '<b>Admin</b>LTE',
Substituir Admin (parte em negrito) e LTE (parte normal)

Linha 35:
'logo_mini' => '<b>A</b>LT',
Substituir A (iniciais em negrito) e LT (iniciais normais)





#CLONANDO UM PROJETO PARA DENTRO DO LARAVEL
Clonar dentro da pasta www, localizada na pasta de instalação do laravel.
Por padrão é C:\laragon\www

No terminal do Laragon, entrar na pasta do projeto clonado.
Dentro da pasta executar comando:
composer install

OBS: Pra entrar em uma pasta usando comandos:
cd aaaa = entra na pasta aaaa (nome da pasta deve ser palavra única)
cd "aaa aaa" = entra na pasta aaa aaa (nome da pasta pode conter espaços)
cd .. = volta para a pasta anterior
cd aaa/bbb = entra na pasta bbb localizada dentro da pasta aaa
cd "C:\Program Files" = entra direto na pasta Program Files
ls = lista os arquivos na pasta atual
ls aaaa = lista arquivos dentro da pasta aaaa

Não esquecer de configurar arquivo .env na raiz do projeto (pode copiar o .env.example para seguir como modelo).
Não esquecer de configurar banco de dados.

Rodar comando:
php artisan key:generate






#COMANDOS DE MIGRAÇÃO

#Criar tabela
php artisan make:migration create_proprietarios_table

#Alterar tabela
php artisan make:migration add_timestamps_proprietarios_table --table=proprietarios

#Executar migração
php artisan migrate

#Executar rollback
php artisan migrate:rollback

#Verificar status
php artisan migrate:status

#Executar comando toda vez que alterar nome ou excluir arquivo de migration
composer dumpautoload

#Explodir seu banco de dados e migrar tudo do começo
php artisan migrate:fresh






#SEED (INSERÇÃO DE DADOS NO BANCO)

#Criar arquivo seeder
php artisan make:seeder UsersTableSeeder

#Colocar dentro do método run()
        DB::table('users')->insert([
            'name' => str_random(10),
            'email' => str_random(10).'@gmail.com',
            'password' => bcrypt('secret'),
        ]);
        
#Editar arquivo DatabaseSeeder.php (na pasta seeds), dentro do método run()
$this->call(UsersTableSeeder::class);

#Executar seeders
php artisan db:seed

#Executar um seed específico
php artisan db:seed --class=UsersTableSeeder









#ALTERANDO O MENU DO PAINEL#
pasta config -> arquivo adminlte.php

Menu está dividido em blocos, delimitados por colchetes []. Estão por volta da linha 100.
Cláusula "can" em um bloco determina quem poderá ver o bloco. Sem ela, todos os usuários conseguem.

Ícones:
'icon' => 'fas fa-fw fa-user-tie',

Site para pegar ícones:
fontawesome.com
Pesquisar ícone, entrar na página dele e clicar no botão Start Using This Icon. Copiar o nome da classe para o código conforme o exemplo acima.




#VERSÃO DOS COMPONENTES
Arquivo composer.json contém as versões instaladas de todos os componentes.




#MVC
Model: Manipulação de dados
View: Interação com os usuários
Control: Camada de controle




#CRIANDO UM MODEL 
php artisan make:model --help

php artisan make:model NomeDaTabela

php artisan make:model Corretor -c -r
Foi criado um model dentro da pasta app. Criou também um controller dentro da pasta app/Http/Controllers

No Model:
colocar dentro da classe o nome da tabela:
protected $table="corretores";

No controller:
função  index: Exibir uma relação de registro na tela 
        create: Exibir um formulário HTML para ser solicitado dados ao usuário
        store: Recebe os dados do formulário (via create) e envia para o banco de dados
        show: Exibir uma página com os dados de um determinado registro
        edit: Exibir um formulário com os dados de um determinado registro para edição
        update: Recebe os dados do formulário (via edit) e atualiza no banco de dados
        destroy: Exclui um determinado registro do banco de dados

Colocar dentro da função index():
        $corretores = Corretor::all();

        return view('corretores.index', $corretores);

No arquivo routes/web.php, adicionar no final:
//Rotas da tabela Corretores
Route::get('/corretores','CorretorController@index')->name('corretores.index');

Na pasta resources/views, criar uma pasta com o nome da tabela (corretores)
Dentro da nova pasta, criar um arquivo chamado index.blade.php
(Todo arquivo criado dentro da pasta views deve terminar em blade.php)

Ir no repositório do Laravel no github:
https://github.com/jeroennoten/laravel-adminlte

Na seção 4: Usage, existe um código a ser colocado no blade:
@extends('adminlte::page')

@section('title', 'Dashboard')

@section('content_header')
    <h1>Dashboard</h1>
@stop

@section('content')
    <p>Welcome to this beautiful admin panel.</p>
@stop

@section('css')
    <link rel="stylesheet" href="/css/admin_custom.css">
@stop

@section('js')
    <script> console.log('Hi!'); </script>
@stop


Copiar e colar este código no arquivo blade, e trocar os textos:
@section('title', 'Dashboard')
Trocar Dashboard -> título da página

<h1>Dashboard</h1>
Trocar Dashboard -> header da página

<p>Welcome to this beautiful admin panel.</p>
Trocar texto entre <p> -> conteúdo da página

De volta no arquivo config/adminlte.php:
Adicionar parâmetro no item de menu que irá linkar com o model:
'route' => 'corretores.index',
corretores.index é o que consta no arquivo web.php, na parte ->name('corretores.index');





BOOTSTRAP: versão 3.3.7
Abrir documentação:
https://getbootstrap.com/docs/3.3/

Dentro do arquivo index.blade.php:
dentro da seção content, copiar o código do panel (está na documentação do bootstrap):
    <div class="panel panel-default">
        <div class="panel-heading">
            Basic heading example
        </div>
        <div class="panel-body">
            Basic panel example
        </div>
        <div class="panel-footer">
            Basic footer example
        </div>
    </div>

Criar os botões: tag a
<a href="link de destino" class="btn btn-tipo">Texto do botão</a>

Exemplos de botões:
<a href="#" class="btn btn-info">Atualizar a tela</a>
<a href="#" class="btn btn-success">Incluir novo corretor</a>

código final da seção content de corretores:
@section('content')
    <div class="panel panel-default">
        <div class="panel-heading clearfix">
            Relação dos corretores cadastrados
            <div class="pull-right">
                <a href="#" class="btn btn-info"><i class="fas fa-fw fa-sync-alt"></i>Atualizar a tela</a>
                <a href="#" class="btn btn-success"><i class="fas fa-fw fa-plus"></i>Incluir novo corretor</a>
            </div>
        </div>
        <div class="panel-body">
            <table id="table-corretores" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nome</th>
                        <th>Telefone</th>
                        <th>E-mail</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($corretores as $corretor)
                    <tr>
                        <td>{{ $corretor->id }}</td>
                        <td>{{ $corretor->nome }}</td>
                        <td>{{ $corretor->fone }}</td>
                        <td>{{ $corretor->email }}</td>
                        <td>
                            <!-- Botão de visualização -->
                            <a href="#" class="btn btn-primary btn-xs"><i class="fas fa-fx fa-eye"></i></a>
                            <!-- Botão de edição -->
                            <a href="#" class="btn btn-warning btn-xs"><i class="fas fa-fx fa-pencil-alt"></i></a>
                            <!-- Botão de exclusão | envia um formulário ao invés de link -->
                            <form action="#" method="POST" onsubmit="return confirm('Você tem certeza que deseja excluir este registro?');" style="display: inline-block;">
                            <input type="hidden" name="_method" value="DELETE">
                            <input type="hidden" name="_token" value="{{ csrf_token() }}">
                            <button type="submit" class="btn btn-danger btn-xs"><i class="fas fa-fx fa-trash-alt"></i></button>
                            </form>
                        </td>
                    </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
@stop


Criando seeder para popular a tabela:
no terminal:
php artisan make:seed CorretoresSeeder
seeder foi gerado na pasta database

No seeder, dentro do método run():
declarar uma instância de Faker, para poder criar dados falsos:
$faker = Faker\Factory::create('pt_BR');

No github do Faker, tem opções de uso:
https://github.com/fzaninotto/Faker

Após o faker, criar um laço for para criar várias entradas:
        for ($i=1; $i<100; $i++) {
            DB::table('corretores')->insert(
                [
                    'nome' => $faker->name,
                    'creci' => $faker->randomNumber(7),
                    'fone' => $faker->cellphoneNumber,
                    'email' => $faker->safeEmail,
                ]
            );
        }

Dentro dos [], delimitar os campos da tabela e colocar uma opção correspondente do Faker que foi encontrado no github.

Rodar o seeder no terminal:
php artisan db:seed --class=CorretoresSeeder


Melhorar a tabela de corretores:

dentro da seção js do index.blade, colocar as tags <script></script>

site datatables.net
copiar a função no passo 2 e colar dentro da tag script:
$(document).ready( function () {
    $('#myTable').DataTable();
} );
substituir myTable para o id da tabela (table-corretores)

Para traduzir o DataTable pra português, abrir os parênteses de DataTable() e colar entre eles:
        {
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.10.20/i18n/Portuguese-Brasil.json"
            }
        } 
ficaria assim:
$('#table-corretores').DataTable( {
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.10.20/i18n/Portuguese-Brasil.json"
            }
        }
    );






#CRUD
Criar rota para página de Incluir corretores:


Gerar todas as rotas para as operações CRUD de corretores:
* abrir arquivo routes/web.php
* colocar a seguinte linha no final 
Route::resource('corretores','CorretorController');

No terminal, dentro da pasta do projeto:
php artisan route:list

Dentro da pasta resources/views/corretores, criar arquivos:
create.blade.php
edit.blade.php
show.blade.php

Colar dentro dos arquivos o template de página do adminlte:
@extends('adminlte::page')

@section('title', 'Dashboard')

@section('content_header')
    <h1>Dashboard</h1>
@stop

@section('content')
    <p>Welcome to this beautiful admin panel.</p>
@stop

@section('css')
    <link rel="stylesheet" href="/css/admin_custom.css">
@stop

@section('js')
    <script> console.log('Hi!'); </script>
@stop


Alterar o título da página (section title)
Alterar cabeçalho da página (section content_header)
Pode apagar conteúdo das seções css e js, que não serão utilizadas

A página em si ficará na seção Content. Apagar o conteúdo dela para abrir espaço.
Colocar um panel dentro do Content:
    <form action="{{ router('corretores.store') }}" method="post" enctype="multipart/form-data">
        <div class="panel-default">
            <div class="panel-heading">
            
            </div>
            <div class="panel-body">

            </div>
            <div class="panel-footer">
            
            </div>
        </div>
    </form>

Dentro do heading, colocar um texto informando o que será feito na página. Exemplo:
            <div class="panel-heading">
                Informe os dados do corretor a ser cadastrado.
            </div>

Dentro do body, criar uma estrutura de labels+inputs dentro de form-groups para criar os campos de cadastro. Exemplo:
            <div class="panel-body">
                <div class="form-group">
                    <label for="nome">Nome do corretor</label>
                    <input type="text" name="nome" id="nome" class="form-control">
                </div>

                <div class="form-group">
                    <label for="creci">Número do CRECI</label>
                    <input type="text" name="creci" id="creci" class="form-control">
                </div>

                <div class="form-group">
                    <label for="fone">Telefone de Contato</label>
                    <input type="text" name="fone" id="fone" class="form-control">
                </div>

                <div class="form-group">
                    <label for="email">E-mail</label>
                    <input type="text" name="email" id="email" class="form-control">
                </div>
            </div>

Dentro do footer, criar botões:
            <div class="panel-footer">
                <a href="{{ route('corretores.index') }}" class="btn btn-default">Voltar</a>
                <button type="submit" class="btn btn-success">Gravar</button>
            </div>


No controller, dentro do método create:
return view('corretores.create');

Para incluir links pra página de cadastro, colocar o seguinte parâmetro
em qualquer objeto:
href="{{ route('corretores.create') }}"


Dentro do método store do CorretorController:
Corretor::create($request->all());
return redirect()->route('corretores.index');

Dentro do Model (app/Corretor.php), adicionar após a declaração do $table:
    protected $fillable = [
        'nome', 'creci', 'fone', 'email'
    ];